;;
;; Header files for Round
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Join$_load
(slice, ((slice))) $Join$_load(slice sc_0) inline;

;; $Round$_store
builder $Round$_store(builder build_0, (slice, int, cell, int) v) inline;

;; $Round$_load
(slice, ((slice, int, cell, int))) $Round$_load(slice sc_0) inline;

;; $Round$init$_load
(slice, ((int, slice))) $Round$init$_load(slice sc_0) inline;

;; $Round$_contract_init
(slice, int, cell, int) $Round$_contract_init(int $_round, slice $_contract) impure inline_ref;

;; $Round$_contract_load
(slice, int, cell, int) $Round$_contract_load() impure inline_ref;

;; $Round$_contract_store
() $Round$_contract_store((slice, int, cell, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $Round$_fun_get_user_record
((slice, int, cell, int), cell) $Round$_fun_get_user_record((slice, int, cell, int) $self) impure inline_ref;

;; $Round$_fun_balance_reward
((slice, int, cell, int), int) $Round$_fun_balance_reward((slice, int, cell, int) $self) impure inline_ref;

;; $Round$_fun_msgValue
((slice, int, cell, int), int) $Round$_fun_msgValue((slice, int, cell, int) $self, int $msgValue) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce(slice to, int value, int mode, int bounce) inline;
